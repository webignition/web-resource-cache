imports:
    - { resource: parameters/*.yaml }
    - { resource: parameters/cache-control-min-fresh/*.yaml }

# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\EventListener\KernelExceptionEventListener:
        tags:
        - { name: kernel.event_listener, event: kernel.exception, priority: 20 }

    app.services.callbackurlvalidator:
        class: App\Services\CallbackUrlValidator
        factory: 'App\Services\CallbackUrlValidatorFactory:create'
        arguments:
            $allowedHostsString: '%env(CALLBACK_ALLOWED_HOSTS)%'

    App\Controller\RequestController:
        class: App\Controller\RequestController
        tags: ['controller.service_arguments']
        arguments:
            $callbackUrlValidator: '@app.services.callbackurlvalidator'

    webignition\HttpHistoryContainer\Container:

    Kevinrob\GuzzleCache\CacheMiddleware:
        factory: 'App\Services\Http\CacheMiddlewareFactory:create'

    GuzzleHttp\Cookie\CookieJarInterface:
        class: GuzzleHttp\Cookie\CookieJar

    async_http_retriever.http.handler_stack.retriever:
        class: GuzzleHttp\HandlerStack
        factory: 'App\Services\Http\HandlerStackFactory:create'
        arguments:
            $middlewareCollection: '@App\Services\Http\RetrieverMiddlewareCollection'

    async_http_retriever.http.handler_stack.sender:
        class: GuzzleHttp\HandlerStack
        factory: 'App\Services\Http\HandlerStackFactory:create'
        arguments:
            $middlewareCollection: '@App\Services\Http\SenderMiddlewareCollection'

    async_http_retriever.http.client.retriever:
        class: GuzzleHttp\Client
        factory: 'App\Services\Http\ClientFactory:create'
        arguments:
            $curlOptions: '%curl_options%'
            $handlerStack: '@async_http_retriever.http.handler_stack.retriever'
            $config:
                cookies: '@GuzzleHttp\Cookie\CookieJarInterface'
                timeout: '%env(RETRIEVER_TIMEOUT_SECONDS)%'

    async_http_retriever.http.client.sender:
        class: GuzzleHttp\Client
        factory: 'App\Services\Http\ClientFactory:create'
        arguments:
            $curlOptions: '%curl_options%'
            $handlerStack: '@async_http_retriever.http.handler_stack.sender'

    Memcached:
        class: \Memcached
        calls:
            - [addServer, ['%memcached_host%', '%memcached_port%']]

    Doctrine\Common\Cache\MemcachedCache:
        calls:
            - [setMemcached, ['@Memcached']]

    App\Services\CachedResourceValidator:
        arguments:
            - '%cache-control-min-fresh%'

    App\Services\RetryDecider:
        arguments:
            - '%retryable_statuses%'

    App\Services\ResourceRetriever:
        arguments:
            $httpClient: '@async_http_retriever.http.client.retriever'
            $requestTimeout: '%env(RETRIEVER_TIMEOUT_SECONDS)%'

    App\Services\ResponseSender:
        arguments:
            $httpClient: '@async_http_retriever.http.client.sender'
